#!/usr/bin/env python3
"""
‚úÖ Script de Validation du Syst√®me d'Effets
V√©rifie que tous les composants sont op√©rationnels
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

def test_imports():
    """Test des imports."""
    print("üì¶ Test des imports...")
    try:
        from gamepython2d.effects_system import EffectsSystem, Particle
        print("   ‚úÖ EffectsSystem import√©")
        
        from gamepython2d.audio_system import AudioSystem
        print("   ‚úÖ AudioSystem import√©")
        
        from gamepython2d.game import Game
        print("   ‚úÖ Game import√©")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur d'import: {e}")
        return False

def test_effects_system():
    """Test du syst√®me d'effets."""
    print("\nüé® Test du syst√®me d'effets...")
    try:
        from gamepython2d.effects_system import EffectsSystem
        
        effects = EffectsSystem()
        print(f"   ‚úÖ EffectsSystem cr√©√©")
        print(f"   ‚ÑπÔ∏è  Particules initiales: {len(effects.particles)}")
        
        # Test de cr√©ation d'effets
        effects.create_card_selection_effect(100, 100, 'common')
        print(f"   ‚úÖ Effet carte cr√©√©: {len(effects.particles)} particules")
        
        effects.create_upgrade_effect(200, 200, 'speed_boost')
        print(f"   ‚úÖ Effet upgrade cr√©√©: {len(effects.particles)} particules")
        
        effects.create_level_up_effect(300, 300)
        print(f"   ‚úÖ Effet level up cr√©√©: {len(effects.particles)} particules")
        
        # Test update
        effects.update(0.016)  # ~1 frame √† 60 FPS
        print(f"   ‚úÖ Update fonctionne: {len(effects.particles)} particules restantes")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_audio_system():
    """Test du syst√®me audio."""
    print("\nüîä Test du syst√®me audio...")
    try:
        from gamepython2d.audio_system import AudioSystem
        
        audio = AudioSystem()
        print(f"   ‚úÖ AudioSystem cr√©√©")
        print(f"   ‚ÑπÔ∏è  Sons g√©n√©r√©s: {len(audio.sound_cache)}")
        
        # V√©rifier les sons par cat√©gorie
        card_sounds = [k for k in audio.sound_cache.keys() if 'card_select' in k]
        print(f"   ‚úÖ Sons de cartes: {len(card_sounds)}")
        
        upgrade_sounds = [k for k in audio.sound_cache.keys() if 'upgrade' in k]
        print(f"   ‚úÖ Sons d'upgrades: {len(upgrade_sounds)}")
        
        combat_sounds = [k for k in audio.sound_cache.keys() if k in ['projectile_fire', 'projectile_impact', 'enemy_death']]
        print(f"   ‚úÖ Sons de combat: {len(combat_sounds)}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_game_integration():
    """Test de l'int√©gration dans le jeu."""
    print("\nüéÆ Test de l'int√©gration...")
    try:
        from gamepython2d.game import Game
        
        # Cr√©er une instance de jeu (sans affichage)
        game = Game()
        print(f"   ‚úÖ Instance Game cr√©√©e")
        
        # V√©rifier que les syst√®mes sont pr√©sents
        assert hasattr(game, 'effects'), "Attribut 'effects' manquant"
        print(f"   ‚úÖ Syst√®me effects pr√©sent")
        
        assert hasattr(game, 'audio'), "Attribut 'audio' manquant"
        print(f"   ‚úÖ Syst√®me audio pr√©sent")
        
        # V√©rifier les particules
        particles_count = len(game.effects.particles)
        print(f"   ‚ÑπÔ∏è  Particules initiales: {particles_count}")
        
        # V√©rifier les sons
        sounds_count = len(game.audio.sound_cache)
        print(f"   ‚ÑπÔ∏è  Sons disponibles: {sounds_count}")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_effects_types():
    """Test de tous les types d'effets."""
    print("\nüéØ Test des types d'effets...")
    try:
        from gamepython2d.effects_system import EffectsSystem
        
        effects = EffectsSystem()
        test_pos = (400, 300)
        
        # Test cartes
        rarities = ['common', 'uncommon', 'rare', 'epic', 'legendary']
        for rarity in rarities:
            effects.create_card_selection_effect(*test_pos, rarity)
        print(f"   ‚úÖ Effets de cartes: {len(rarities)} test√©s")
        
        # Test upgrades
        upgrade_types = ['speed_boost', 'damage_boost', 'attack_speed_boost', 
                        'health_boost', 'heal', 'multi_shot', 'all_stats']
        for upgrade in upgrade_types:
            effects.create_upgrade_effect(*test_pos, upgrade)
        print(f"   ‚úÖ Effets d'upgrades: {len(upgrade_types)} test√©s")
        
        # Test combat
        effects.create_projectile_fire_effect(*test_pos)
        effects.create_projectile_impact_effect(*test_pos)
        effects.create_projectile_trail(*test_pos)
        effects.create_enemy_death_effect(*test_pos)
        print(f"   ‚úÖ Effets de combat: 4 test√©s")
        
        # Test sp√©ciaux
        effects.create_level_up_effect(*test_pos)
        print(f"   ‚úÖ Effets sp√©ciaux: 1 test√©")
        
        total = len(rarities) + len(upgrade_types) + 5
        print(f"   üéâ Total: {total} types d'effets fonctionnels")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Ex√©cute tous les tests."""
    print("=" * 60)
    print("üéÜ VALIDATION DU SYST√àME D'EFFETS - GamePython2D")
    print("=" * 60)
    
    results = []
    
    # Ex√©cuter les tests
    results.append(("Imports", test_imports()))
    results.append(("Syst√®me d'effets", test_effects_system()))
    results.append(("Syst√®me audio", test_audio_system()))
    results.append(("Int√©gration jeu", test_game_integration()))
    results.append(("Types d'effets", test_effects_types()))
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    for name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {name}")
    
    # Verdict final
    all_passed = all(result[1] for result in results)
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ TOUS LES TESTS R√âUSSIS !")
        print("Le syst√®me d'effets est enti√®rement op√©rationnel.")
        print("\nPour tester interactivement:")
        print("  python main.py")
        print("  python tools/testing/test_effects_demo.py")
    else:
        print("‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus.")
    print("=" * 60)
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    sys.exit(main())
