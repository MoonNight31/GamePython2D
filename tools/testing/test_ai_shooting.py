#!/usr/bin/env python3
"""
Test du syst√®me de tir de l'IA
Diagnostic du comportement de shooting pour identifier les probl√®mes
"""

import sys
import os
import pygame
import numpy as np
import time

# Ajouter le r√©pertoire src au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'src'))

from gamepython2d.ai_trainer import GameAITrainer
from gamepython2d.ai_environment import GameAIEnvironment

def test_ai_shooting():
    """Test diagnostic du syst√®me de tir de l'IA."""
    print("üéØ Test du syst√®me de tir de l'IA")
    print("="*50)
    
    # Chercher le mod√®le le plus r√©cent
    model_path = None
    if os.path.exists("curriculum_models/stage_1_model.zip"):
        model_path = "curriculum_models/stage_1_model"
        print("üì¶ Utilisation du mod√®le curriculum stage 1")
    elif os.path.exists("ai_models/game_ai_model_final.zip"):
        model_path = "ai_models/game_ai_model_final"
        print("üì¶ Utilisation du mod√®le final")
    else:
        print("‚ùå Aucun mod√®le trouv√©")
        return
    
    # Cr√©er l'environnement
    env = GameAIEnvironment(render_mode="human")
    
    # Charger le mod√®le
    trainer = GameAITrainer()
    trainer.create_environment(n_envs=1)
    trainer.load_model(model_path)
    
    print(f"üß† Mod√®le charg√© : {model_path}")
    print("\nüî¨ D√©but du test diagnostique...")
    print("Actions surveill√©es :")
    print("  - should_attack > 0.5 = tentative de tir")
    print("  - Direction de tir (attack_x, attack_y)")
    print("  - Nombre de projectiles actifs")
    print("  - Fr√©quence de tir")
    print("\nAppuyez sur ESC pour arr√™ter\n")
    
    obs, _ = env.reset()
    
    # Statistiques de diagnostic
    total_steps = 0
    shoot_attempts = 0
    successful_shots = 0
    last_projectile_count = 0
    shoot_frequency = []
    
    clock = pygame.time.Clock()
    running = True
    
    while running and total_steps < 1000:
        # G√©rer les √©v√©nements
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
        
        # Pr√©diction de l'IA
        action, _ = trainer.model.predict(obs, deterministic=True)
        move_x, move_y, attack_x, attack_y, should_attack = action
        
        # Analyser l'action de tir
        if should_attack > 0.5:
            shoot_attempts += 1
            print(f"Step {total_steps:3d}: üéØ TIR! direction=({attack_x:.2f}, {attack_y:.2f})")
        
        # Ex√©cuter l'action
        obs, reward, terminated, truncated, info = env.step(action)
        
        # V√©rifier les projectiles
        current_projectiles = len([p for p in env.player.projectiles if p.active])
        if current_projectiles > last_projectile_count:
            successful_shots += 1
            print(f"Step {total_steps:3d}: ‚úÖ PROJECTILE CR√â√â! Total actifs: {current_projectiles}")
        
        last_projectile_count = current_projectiles
        total_steps += 1
        
        # Afficher stats toutes les 100 √©tapes
        if total_steps % 100 == 0:
            shoot_rate = shoot_attempts / total_steps * 100
            success_rate = (successful_shots / max(1, shoot_attempts)) * 100
            print(f"\nüìä STATS (Step {total_steps}):")
            print(f"   Tentatives de tir: {shoot_attempts} ({shoot_rate:.1f}%)")
            print(f"   Tirs r√©ussis: {successful_shots} ({success_rate:.1f}%)")
            print(f"   Projectiles actifs: {current_projectiles}")
            print(f"   Vie joueur: {env.player.health}")
            print(f"   Ennemis: {len(env.enemy_spawner.enemies)}")
            print()
        
        env.render()
        clock.tick(60)
        
        if terminated or truncated:
            print(f"\nüíÄ Fin de partie au step {total_steps}")
            break
    
    # R√©sultats finaux
    print(f"\nüèÜ R√âSULTATS FINAUX:")
    print(f"   Total steps: {total_steps}")
    print(f"   Tentatives de tir: {shoot_attempts}")
    print(f"   Tirs r√©ussis: {successful_shots}")
    print(f"   Taux de tentatives: {shoot_attempts/total_steps*100:.1f}%")
    print(f"   Taux de succ√®s: {successful_shots/max(1,shoot_attempts)*100:.1f}%")
    
    # Diagnostic
    print(f"\nüîç DIAGNOSTIC:")
    if shoot_attempts == 0:
        print("   ‚ùå PROBL√àME: L'IA ne tente jamais de tirer!")
        print("   üí° Solution: V√©rifier le syst√®me de r√©compenses de tir")
    elif shoot_attempts < total_steps * 0.1:
        print("   ‚ö†Ô∏è PROBL√àME: L'IA tire tr√®s rarement")
        print("   üí° Solution: Augmenter les r√©compenses de tir")
    elif successful_shots == 0:
        print("   ‚ùå PROBL√àME: Aucun projectile cr√©√© malgr√© les tentatives")
        print("   üí° Solution: V√©rifier la logique d'attaque du joueur")
    elif successful_shots < shoot_attempts * 0.5:
        print("   ‚ö†Ô∏è PROBL√àME: Beaucoup de tentatives rat√©es")
        print("   üí° Solution: V√©rifier le cooldown des projectiles")
    else:
        print("   ‚úÖ COMPORTEMENT NORMAL: L'IA tire correctement")
    
    # Nettoyage
    trainer.close()
    env.close()
    pygame.quit()

if __name__ == "__main__":
    test_ai_shooting()